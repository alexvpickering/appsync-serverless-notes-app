service: 
  name: notes-app-appsync
  publish: false # disable auto-publishing to the Serverless platform

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-appsync-plugin

functions:
  graphql:
    handler: handler.graphqlHandler

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-2
  memorySize: 512
  deploymentBucket: notes-app-prod-serverless-deployment

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - { "Fn::Join" : ["", ["arn:aws:s3:::", "${cf:notes-app-s3-prod.S3BucketContentRef}" ]]}


# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  accountId: ${file(config.json):accountId} # found here https://console.aws.amazon.com/billing/home?#/account
  appSync:
    name: notes-appsync-api # defaults to api
    schema: schema.graphql # defaults schema.graphql
    apiId: ${file(config.json):apiId} # only required for update-appsync/delete-appsync
    apiKey: # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region} # required # region
      defaultAction: ALLOW # ALLOW
      userPoolId: ${file(config.json):userPoolId} # required # user pool ID

      
    # == Mapping Templates
    #
    mappingTemplatesLocation: mapping-templates # defaults to mapping-templates
    mappingTemplates:
      - dataSource: myDynamoDB # data source name
        type: Query # Query, Mutation, Subscription
        field: getNote
        request: "getNote-request.txt" # request mapping template name
        response: "getNote-response.txt" # response mapping template name
      - dataSource: myLambda 
        type: Note
        field: content
        request: "getContent-request.txt" 
        response: "getContent-request.txt" 
        
        
    # == AppSync Data Sources
    # (doesn't create resources)
    serviceRole: AppSyncServiceRole
    dataSources: 
      - type: AMAZON_DYNAMODB
        name: myDynamoDB # data source name
        description: Notes table # DynamoDB Table Description
        config:
          tableName: notes # DynamoDB Table Name
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/${cf:notes-app-dynamodb-prod.DynamoAppSyncServiceRole}"
      - type: AWS_LAMBDA
        name: myLambda
        description: Lambda DataSource
        config:
          lambdaFunctionArn: "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service}-${self:provider.stage}-graphql"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}"


# create the resources
resources:  # CloudFormation template syntax
  Resources:  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html

     # create 'LambdaAppSyncServiceRole' to grant access to lambda function
    LambdaAppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service}-${self:provider.stage}-graphql"
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service}-${self:provider.stage}-graphql:*"
