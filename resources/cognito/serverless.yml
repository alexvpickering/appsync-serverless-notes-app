service: ${file(../config.json):name}-cognito # NOTE: update this with your service name

plugins:
  - serverless-stack-output

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-2
  deploymentBucket: ${file(../config.json):name}-${self:provider.stage}-serverless-deployment

custom:
  output:
    handler: output.handler # Same syntax as you already know
    file: ../../${file(../config.json):name}-client/src/outputs/cognito.json # toml, yaml, yml, and json format is available


# you can add CloudFormation resource templates here
resources:
  Resources:
    # Creates a User Pool Client to be used by the identity pool
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:service}-client
        GenerateSecret: false
        UserPoolId: 
          ${file(user-pool.json):UserPoolId}


     # Creates a federeated Identity pool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${file(../config.json):camelName}CognitoIdentity
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders: 
          - ClientId: 
              Ref: UserPoolClient
            ProviderName:
              "cognito-idp.${self:provider.region}.amazonaws.com/${file(user-pool.json):UserPoolId}"


    # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                # - Effect: "Allow"
                #   Action:
                #     - "lambda:InvokeFunction"
                #   Resource: "*"
    
    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: 
          Ref: IdentityPool
        Roles:
          authenticated:
              'Fn::GetAtt': [ CognitoAuthorizedRole, Arn ]
          unauthenticated:
              'Fn::GetAtt': [ CognitoUnAuthorizedRole, Arn ]

  Outputs:
    UserPoolId:
      Value: 
        ${file(user-pool.json):UserPoolId}
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
    IdentityPoolId:
      Value:
        Ref: IdentityPool
    TestUserEmail:
      Value: ${file(../config.json):email}
    TestUserPassword:
      Value: ${file(../config.json):password}


